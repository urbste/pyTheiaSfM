"""Type stubs for the pytheia.sfm module."""
from typing import Dict, List, Optional, Set, Tuple, Union, Any, Callable
import numpy as np
from numpy.typing import NDArray

# Based on the code structure, this module likely contains Structure from Motion related classes and functions
# Such as View, Reconstruction, Camera, TrackEstimator, etc.

class View:
    """A view in the SfM reconstruction."""
    def __init__(self) -> None: ...
    def SetEstimated(self, is_estimated: bool) -> None: ...
    def IsEstimated(self) -> bool: ...
    def SetImage(self, image: str) -> None: ...
    def Name(self) -> str: ...
    def SetCameraIntrinsicsPrior(self, intrinsics: Any) -> None: ...  # CameraIntrinsicsPrior type
    def CameraIntrinsicsPrior(self) -> Any: ...  # CameraIntrinsicsPrior type
    def SetCameraId(self, camera_id: int) -> None: ...
    def CameraId(self) -> int: ...
    def Camera(self) -> Any: ...  # Camera type

class TwoViewInfo:
    """Information about the relative pose between two views."""
    def __init__(self) -> None: ...
    focal_length_1: float
    focal_length_2: float
    position_2: NDArray  # 3D vector
    rotation_2: NDArray  # 3D vector (angle-axis)
    num_verified_matches: int
    num_homography_inliers: int

class Camera:
    """Camera model class."""
    def __init__(self) -> None: ...
    def GetPosition(self) -> NDArray: ...
    def SetPosition(self, position: NDArray) -> None: ...
    def GetOrientationAsAngleAxis(self) -> NDArray: ...
    def SetOrientationFromAngleAxis(self, angle_axis: NDArray) -> None: ...
    def GetOrientationAsRotationMatrix(self) -> NDArray: ...
    def SetOrientationFromRotationMatrix(self, rotation: NDArray) -> None: ...
    def ProjectPoint(self, point: NDArray) -> NDArray: ...
    def ProjectPointWithCameraIntrinsics(self, intrinsics: Any, point: NDArray) -> NDArray: ...

class Track:
    """A 3D track in the reconstruction."""
    def __init__(self) -> None: ...
    def IsEstimated(self) -> bool: ...
    def SetEstimated(self, is_estimated: bool) -> None: ...
    def Point(self) -> NDArray: ...
    def SetPoint(self, point: NDArray) -> None: ...
    def Color(self) -> Tuple[int, int, int]: ...
    def SetColor(self, color: Tuple[int, int, int]) -> None: ...
    def ViewIds(self) -> List[int]: ...
    def AddView(self, view_id: int) -> bool: ...
    def RemoveView(self, view_id: int) -> bool: ...

class Reconstruction:
    """Main reconstruction class."""
    def __init__(self) -> None: ...
    def NumViews(self) -> int: ...
    def NumCameras(self) -> int: ...
    def NumTracks(self) -> int: ...
    def NumEstimatedViews(self) -> int: ...
    def NumEstimatedTracks(self) -> int: ...
    def AddView(self, view_name: str) -> int: ...
    def RemoveView(self, view_id: int) -> bool: ...
    def View(self, view_id: int) -> View: ...
    def AddTrack(self) -> int: ...
    def RemoveTrack(self, track_id: int) -> bool: ...
    def Track(self, track_id: int) -> Track: ...
    def AddObservation(self, track_id: int, view_id: int, feature: Any) -> bool: ...  # Feature type
    def GetEstimatedViewIds(self) -> List[int]: ...
    def GetEstimatedTrackIds(self) -> List[int]: ...
    def GetViewIds(self) -> List[int]: ...
    def GetTrackIds(self) -> List[int]: ...
    def Camera(self, camera_id: int) -> Camera: ...

# Bundle adjustment related classes
class BundleAdjustmentSummary:
    """Summary of a bundle adjustment optimization."""
    def __init__(self) -> None: ...
    initial_cost: float
    final_cost: float
    num_successful_iterations: int
    num_unsuccessful_iterations: int
    num_residuals_reduced: int
    setup_time_in_seconds: float
    solve_time_in_seconds: float

class BundleAdjustmentOptions:
    """Options for bundle adjustment."""
    def __init__(self) -> None: ...
    loss_function_type: str  # e.g. "TRIVIAL", "HUBER", "SOFTLONE", "CAUCHY"
    robust_loss_width: float
    verbose: bool
    max_num_iterations: int
    max_solver_time_in_seconds: float
    use_inner_iterations: bool
    num_threads: int
    constant_camera_orientation: bool
    constant_camera_position: bool

# Global pose estimation
def EstimateGlobalRotations(view_pairs: Dict[Tuple[int, int], TwoViewInfo], 
                            options: Any) -> Dict[int, NDArray]: ...

def EstimateGlobalPositions(global_rotations: Dict[int, NDArray], 
                           view_pairs: Dict[Tuple[int, int], TwoViewInfo], 
                           options: Any) -> Dict[int, NDArray]: ...